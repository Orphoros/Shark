{
  "scopeName": "source.shark",
  "name": "Shark",
  "fileTypes": [
    "shark"
  ],
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#keywords" },
    { "include": "#functions" },
    { "include": "#variables" },
    { "include": "#operators" },
    { "include": "#constants" },
    { "include": "#typeAnnotation" },
    { "include": "#punctuation" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.shark",
          "match": "//.*$"
        },
        {
          "name": "comment.block.shark",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.shark",
          "begin": "\"",
          "end": "\"",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.string.begin.shark" }
          },
          "endCaptures": {
            "0": { "name": "punctuation.definition.string.end.shark" }
          },
          "patterns": [
            {
              "name": "constant.character.escape.shark",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.hex.shark",
          "match": "\\b0x[0-9a-fA-F]+(?:_[0-9a-fA-F]+)*\\b"
        },
        {
          "name": "constant.numeric.binary.shark",
          "match": "\\b0b[01]+(?:_[01]+)*\\b"
        },
        {
          "name": "constant.numeric.octal.shark",
          "match": "\\b0o[0-7]+(?:_[0-7]+)*\\b"
        },
        {
          "name": "constant.numeric.decimal.shark",
          "match": "\\b\\d+(?:_\\d+)*\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.shark",
          "match": "\\b(if|else|while|return)\\b"
        },
        {
          "name": "storage.type.shark",
          "match": "\\b(let|var)\\b"
        },
        {
          "name": "storage.modifier.shark",
          "match": "\\b(mut)\\b"
        },
        {
          "name": "constant.language.boolean.shark",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.range.shark",
          "match": "\\.\\."
        },
        {
          "name": "keyword.operator.spread.shark",
          "match": "\\.\\.\\."
        },
        {
          "name": "keyword.operator.assignment.shark",
          "match": "="
        },
        {
          "name": "keyword.operator.assignment.compound.shark",
          "match": "(\\+=|\\-=|\\/=|\\*=)"
        },
        {
          "name": "keyword.operator.arithmetic.shark",
          "match": "(\\+\\+|\\-\\-|\\+|\\-|\\*|\\/)"
        },
        {
          "name": "keyword.operator.comparison.shark",
          "match": "(==|!=|>=|<=|>|<)"
        },
        {
          "name": "keyword.operator.logical.shark",
          "match": "(&&|\\|\\|)"
        },
        {
          "name": "storage.type.function.arrow.shark",
          "match": "=>"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.definition.shark",
          "begin": "\\b(let|var)\\s+(mut\\s+)?([a-zA-Z_][a-zA-Z0-9_]*)\\s*=\\s*\\(",
          "beginCaptures": {
            "1": { "name": "storage.type.shark" },
            "2": { "name": "storage.modifier.shark" },
            "3": { "name": "entity.name.function.shark" }
          },
          "end": "\\)",
          "patterns": [
            { "include": "#typeAnnotation" },
            { "include": "#parameters" },
            { "include": "#statements" }
          ]
        },
        {
          "name": "meta.function-call.shark",
          "patterns": [
            {
              "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()",
              "captures": {
                "1": { "name": "entity.name.function.shark" }
              }
            }
          ]
        }
      ]
    },
    "parameters": {
      "patterns": [
        {
          "name": "variable.parameter.shark",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        },
        { "include": "#typeAnnotation" },
        { "include": "#operators" },
        { "include": "#numbers" },
        { "include": "#strings" },
        { "include": "#keywords" }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "meta.variable.declaration.shark",
          "begin": "\\b(let|var)\\s+(mut\\s+)?([a-zA-Z_][a-zA-Z0-9_]*)",
          "beginCaptures": {
            "1": { "name": "storage.type.shark" },
            "2": { "name": "storage.modifier.shark" },
            "3": { "name": "variable.other.readwrite.shark" }
          },
          "end": "(?=\\s*=)",
          "patterns": [
            { "include": "#typeAnnotation" }
          ]
        },
        {
          "name": "variable.other.readwrite.shark",
          "match": "\\b(?!if\\b|else\\b|while\\b|return\\b|let\\b|var\\b|mut\\b|true\\b|false\\b)[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.boolean.shark",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.section.block.begin.shark",
          "match": "\\{"
        },
        {
          "name": "punctuation.section.block.end.shark",
          "match": "\\}"
        },
        {
          "name": "punctuation.section.parameters.begin.shark",
          "match": "\\("
        },
        {
          "name": "punctuation.section.parameters.end.shark",
          "match": "\\)"
        },
        {
          "name": "punctuation.section.array.begin.shark",
          "match": "\\["
        },
        {
          "name": "punctuation.section.array.end.shark",
          "match": "\\]"
        },
        {
          "name": "punctuation.separator.comma.shark",
          "match": ","
        },
        {
          "name": "punctuation.terminator.statement.shark",
          "match": ";"
        }
      ]
    },
    "statements": {
      "patterns": [
        { "include": "#typeAnnotation" },
        { "include": "#comments" },
        { "include": "#strings" },
        { "include": "#numbers" },
        { "include": "#keywords" },
        { "include": "#operators" },
        { "include": "#variables" },
        { "include": "#constants" },
        { "include": "#punctuation" }
      ]
    },
    "typeAnnotation": {
      "name": "meta.type.annotation.shark",
      "begin": ":(?=\\s*(\\.{3}|[a-zA-Z]))",
      "beginCaptures": {
        "0": { "name": "punctuation.separator.type.shark" }
      },
      "end": "(?=\\s*(,|\\)|\\}|;|=))",
      "patterns": [
        { "include": "#typeExpression" }
      ]
    },
    "typeExpression": {
      "patterns": [
        {
          "name": "keyword.operator.ellipsis.shark",
          "match": "\\.{3}"
        },
        {
          "name": "punctuation.whitespace.shark",
          "match": "\\s+"
        },
        {
          "name": "support.type.primitive.shark",
          "match": "\\b(?:bool|i64|any|array|tuple|func|string|collection|error|hashmap|null)(\\?\\b)?"
        },
        {
          "name": "meta.generic-type.shark",
          "begin": "<",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.generic.begin.shark" }
          },
          "end": ">",
          "endCaptures": {
            "0": { "name": "punctuation.definition.generic.end.shark" }
          },
          "patterns": [
            { "include": "#typeExpression" }
          ]
        },
        {
          "name": "meta.function-type.shark",
          "begin": "\\(",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.parameters.begin.shark" }
          },
          "end": "\\)",
          "endCaptures": {
            "0": { "name": "punctuation.definition.parameters.end.shark" }
          },
          "patterns": [
            { "include": "#typeExpression" }
          ]
        },
        {
          "name": "keyword.operator.arrow.shark",
          "match": "->"
        },
        {
          "name": "variable.other.type.shark",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
}